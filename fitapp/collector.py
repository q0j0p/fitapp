# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_collector.ipynb.

# %% auto 0
__all__ = ['webpage', 'logger', 'Collector']

# %% ../nbs/00_collector.ipynb 4
from bs4 import BeautifulSoup as bs
from selenium import webdriver
from selenium.webdriver.common.by import By
import logging
from selenium import webdriver
from selenium.webdriver.remote.webdriver import WebDriver
import pickle
import pandas as pd
from pathlib import Path
import os

# %% ../nbs/00_collector.ipynb 5
webpage = "https://www.nasm.org/exercise-library" 
# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger()

class Collector(object): 
    """Collects items from a website."""
    def __init__(self, url:str):
        self.driver = webdriver.Chrome()
        self.url = url

    def get_url(self): self.driver.get(self.url)

    def get_elements_by_css(self, css_selector: str):
        try:
            elements = self.driver.find_elements(By.CSS_SELECTOR, css_selector)
            logger.info(f"Found {len(elements)} elements with CSS selector: {css_selector}")
            return elements
        except Exception as e:
            logger.error(f"An error occurred while trying to find elements: {e}")
            return []

    def collect_data_from_elements(self, elements, css_selectors):
        data_list = []
        for element in elements:
            data = {}
            for key, selector in css_selectors.items():
                try:
                    if key=="link": 
                        data[key] = element.find_element(By.CSS_SELECTOR, selector).get_attribute('href')
                    else:
                        data[key] = element.find_element(By.CSS_SELECTOR, selector).text
                except Exception as e:
                    logger.error(f"Could not find {key} using selector {selector}: {e}")
                    data[key] = None
            data_list.append(data)
        return data_list 
        

    def get_repeating_elements(self, selector, css_selectors):
        self.elements = self.get_elements_by_css(selector)
        return self.collect_data_from_elements(self.elements, css_selectors)
        
    
